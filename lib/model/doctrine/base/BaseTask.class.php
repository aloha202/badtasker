<?php

/**
 * BaseTask
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $board_id
 * @property integer $executer_id
 * @property integer $responsible_id
 * @property string $name
 * @property string $description
 * @property date $deadline
 * @property string $punishment
 * @property enum $status
 * @property Board $Board
 * @property sfGuardUser $Executer
 * @property sfGuardUser $Responsible
 * 
 * @method integer     getBoardId()        Returns the current record's "board_id" value
 * @method integer     getExecuterId()     Returns the current record's "executer_id" value
 * @method integer     getResponsibleId()  Returns the current record's "responsible_id" value
 * @method string      getName()           Returns the current record's "name" value
 * @method string      getDescription()    Returns the current record's "description" value
 * @method date        getDeadline()       Returns the current record's "deadline" value
 * @method string      getPunishment()     Returns the current record's "punishment" value
 * @method enum        getStatus()         Returns the current record's "status" value
 * @method Board       getBoard()          Returns the current record's "Board" value
 * @method sfGuardUser getExecuter()       Returns the current record's "Executer" value
 * @method sfGuardUser getResponsible()    Returns the current record's "Responsible" value
 * @method Task        setBoardId()        Sets the current record's "board_id" value
 * @method Task        setExecuterId()     Sets the current record's "executer_id" value
 * @method Task        setResponsibleId()  Sets the current record's "responsible_id" value
 * @method Task        setName()           Sets the current record's "name" value
 * @method Task        setDescription()    Sets the current record's "description" value
 * @method Task        setDeadline()       Sets the current record's "deadline" value
 * @method Task        setPunishment()     Sets the current record's "punishment" value
 * @method Task        setStatus()         Sets the current record's "status" value
 * @method Task        setBoard()          Sets the current record's "Board" value
 * @method Task        setExecuter()       Sets the current record's "Executer" value
 * @method Task        setResponsible()    Sets the current record's "Responsible" value
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTask extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('task');
        $this->hasColumn('board_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('executer_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('responsible_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('deadline', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('punishment', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'in_progress',
              1 => 'done',
              2 => 'failed',
             ),
             'default' => 'in_progress',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Board', array(
             'local' => 'board_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as Executer', array(
             'local' => 'executer_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as Responsible', array(
             'local' => 'responsible_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}